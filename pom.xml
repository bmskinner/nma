<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.bmskinner</groupId>
	<artifactId>nuclear_morphology</artifactId>
	<version>1.15.4</version>

	<!-- Define custom properties -->
	<properties>
		<project.full.name>Nuclear_Morphology_Analysis</project.full.name>
		<project.code.name>Excelsior</project.code.name>
		<version.suffix></version.suffix>
		<project.build.sourceEncoding>ISO-8859-1</project.build.sourceEncoding>
		<jar.finalName>${project.full.name}_${project.version}${version.suffix}</jar.finalName>
		<project.template.directory>templates</project.template.directory>
		<project.scripts.directory>scripts</project.scripts.directory>
		<maven.build.timestamp.format>yyyy</maven.build.timestamp.format>
	</properties>

	<build>
		<sourceDirectory>src</sourceDirectory>
		<testSourceDirectory>test</testSourceDirectory>

		<!-- Define resources -->
		<resources>
			<resource>

				<!-- Define source file resources -->
				<directory>src</directory>
				<includes>
					<include>plugins.config</include>
					<include>COPYING</include>
				</includes>
			</resource>
			<resource>
				<directory>res</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>screenshots</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>test</directory>
				<includes>
					<include>**/*.java</include>
				</includes>
			</testResource>
		</testResources>

		<!-- Tell eclipse how to handle the timestamp plugin -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.2,)</versionRange>
										<goals>
											<goal>create-timestamp</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>


		<plugins>

			<!-- Create a year variable -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create-timestamp</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<timestampFormat>yyyy</timestampFormat>
					<timestampPropertyName>build.year</timestampPropertyName>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.1</version>
				<executions>

					<!-- Copy the readme with version info to the base directory so the repo is up to date -->
					<execution>
						<id>readme-md</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}</directory>
									<includes>
										<include>README.md</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>
					
					<!-- Write the version info to the ImageJ plugins config file -->
					<execution>
						<id>imagej-plugins-config</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>src</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}</directory>
									<includes>
										<include>plugins.config</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Compile to desired java version -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- Run the test suite -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
	         		 <includes>
	          		</includes>
	          		<excludes>
			        </excludes>
       			 </configuration>
			</plugin>

			<!-- Make an executable jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>com.bmskinner.nuclear_morphology.core.Nuclear_Morphology_Analysis</mainClass>
							<classpathPrefix>dependency-jars/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- Copy project dependencies to new folder -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.5.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- exclude junit, we need runtime dependency only -->
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/dependency-jars/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.5.5</version>

				<!-- Create a jar with the dependencies included as a standalone version -->
				<executions>
					<execution>
						<id>create-executable-jar</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${jar.finalName}_standalone</finalName>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<appendAssemblyId>false</appendAssemblyId>
							<archive>
								<manifest>
									<mainClass>com.bmskinner.nuclear_morphology.core.Nuclear_Morphology_Analysis</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>

					<!-- Create a zip with the jar file and dependencies for distribution 
						as ImageJ plugin install file -->
					<execution>
						<id>create-packaged-zip</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${jar.finalName}_ImageJ_plugin</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Use Launch4J to create an exe file for Windows standalone version -->
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<version>1.7.23</version>
				<executions>
					<execution>
						<id>l4j-gui</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<headerType>gui</headerType>
							<jar>${project.build.directory}/${jar.finalName}_standalone.jar</jar>
							<outfile>${project.build.directory}/${jar.finalName}.exe</outfile>
							<downloadUrl>http://java.com/download</downloadUrl>
							<classPath>
								<mainClass>com.bmskinner.nuclear_morphology.core.Nuclear_Morphology_Analysis</mainClass>
							</classPath>
							<jre>
								<bundledJre64Bit>false</bundledJre64Bit>
								<bundledJreAsFallback>false</bundledJreAsFallback>
								<minVersion>1.8.0</minVersion>
								<jdkPreference>preferJdk</jdkPreference>
								<runtimeBits>64/32</runtimeBits>
								<initialHeapPercent>5</initialHeapPercent>
								<maxHeapPercent>80</maxHeapPercent>
							</jre>
							<versionInfo>
								<fileVersion>${project.version}.0</fileVersion>
								<txtFileVersion>${project.version}${version.suffix}</txtFileVersion>
								<fileDescription>Biological analysis software for nuclear shape</fileDescription>
								<productVersion>${project.version}.0</productVersion>
								<txtProductVersion>${project.version}${version.suffix}</txtProductVersion>
								<productName>${project.full.name}</productName>
								<originalFilename>${jar.finalName}.exe</originalFilename>
								<copyright>Ben Skinner ${project.inceptionYear}-${build.year}</copyright>
								<internalName>${project.code.name}</internalName>
								<language>ENGLISH_UK</language>
							</versionInfo>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.3</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.7</version>
			</plugin>

		</plugins>

	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.0.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.11.0</version>
			</plugin>

			<!-- Report code metrics -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>

		</plugins>
	</reporting>
	
	<dependencies>
		<dependency>
			<groupId>fr.inra.ijpb</groupId>
			<artifactId>MorphoLibJ_</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>jebl</groupId>
			<artifactId>jebl</artifactId>
			<version>0.4</version>
		</dependency>
		<dependency>
			<groupId>skeleton_analysis</groupId>
			<artifactId>skeleton_analysis</artifactId>
			<version>2.0.4</version>
		</dependency>
		<dependency>
			<groupId>mmorpho</groupId>
			<artifactId>mmorpho</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.19</version>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij</artifactId>
			<version>1.51s</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jdt</groupId>
			<artifactId>org.eclipse.jdt.annotation</artifactId>
			<version>2.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.swinglabs.swingx</groupId>
			<artifactId>swingx-all</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>nz.ac.waikato.cms.weka</groupId>
			<artifactId>weka-stable</artifactId>
			<version>3.6.12</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jfreesvg</artifactId>
			<version>3.2</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jcommon</artifactId>
			<version>1.0.23</version>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.jdistlib</groupId>
			<artifactId>jdistlib</artifactId>
			<version>0.4.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>3.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.bmskinner</groupId>
			<artifactId>ViolinPlots</artifactId>
			<version>0.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.7.13</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom2</artifactId>
			<version>2.0.6</version>
		</dependency>
		<dependency>
			<groupId>net.sf.doolin</groupId>
			<artifactId>javadocking</artifactId>
			<version>1.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
	<groupId>com.google.code.gson</groupId>
	<artifactId>gson</artifactId>
	<version>2.8.5</version>
</dependency>
	</dependencies>
	<name>Nuclear Morphology Analysis</name>
	<url>https://bitbucket.org/bmskinner/nuclear_morphology/wiki/Home</url>
	<description>Nuclear Morphology Analysis is a program that allows for automated detection of round or asymmetric nuclei in images, and subsequent morphological analysis.</description>
	<inceptionYear>2015</inceptionYear>
	<licenses>
		<license>
			<name>GNU General Public License, Version 3</name>
			<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
			<distribution>manual</distribution>
			<comments>Free software license</comments>
		</license>
	</licenses>
</project>