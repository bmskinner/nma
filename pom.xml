<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.bmskinner</groupId>
	<artifactId>nma</artifactId>
	<version>2.2.0</version>

	<!-- Define custom properties to be exported -->
	<properties>
		<project.full.name>Nuclear_Morphology_Analysis</project.full.name>
		<version>${project.version}</version>
		<version.suffix></version.suffix>
		<project.build.sourceEncoding>ISO-8859-1</project.build.sourceEncoding>
		<jar.finalName>${project.full.name}_${project.version}${version.suffix}</jar.finalName>
		<project.template.directory>templates</project.template.directory>
		<project.scripts.directory>scripts</project.scripts.directory>
		<project.wiki.directory>wiki</project.wiki.directory>
		<maven.build.timestamp.format>yyyy</maven.build.timestamp.format>
	</properties>

	<!-- People who have worked on this project -->
	<developers>
		<developer>
			<id>ben</id>
			<name>Ben Skinner</name>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>Europe/London</timezone>
		</developer>
	</developers>

	<!-- Define custom properties depending on the OS. This allows a switch 
		between Windows bat scripts and Linux shell scripts depending on the platform 
		used to compile -->
	<profiles>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<script.executor>cmd.exe</script.executor>
				<script.args>/C</script.args> <!--- 'call' flag to use bat files -->
				<script.packaging>packageAppImage.bat</script.packaging>
				<script.rendering>renderUserGuide.bat</script.rendering>
				<script.dependencies>installDependencies.bat</script.dependencies>

				<project.screenshot.directory>res/screens/Windows 10</project.screenshot.directory>
			</properties>
		</profile>

		<profile>
			<id>unix</id>
			<activation>
				<os>
					<family>unix</family>
					<name>Linux</name>
				</os>
			</activation>
			<properties>
				<script.executor>bash</script.executor>
				<script.args></script.args> <!--- intentionally blank, used in Win only -->
				<script.packaging>packageAppImage.sh</script.packaging>
				<script.rendering>renderUserGuide.sh</script.rendering>
				<script.dependencies>installDependencies.sh</script.dependencies>

				<project.screenshot.directory>res/screens/Linux</project.screenshot.directory>
			</properties>
		</profile>

		<profile>
			<id>mac</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<properties>
				<script.executor>bash</script.executor>
				<script.args></script.args> <!--- intentionally blank, used in Win only -->
				<script.packaging>packageDMG.sh</script.packaging>
				<script.rendering>renderUserGuide.sh</script.rendering>
				<script.dependencies>installDependencies.sh</script.dependencies>

				<project.screenshot.directory>res/screens/MacOS</project.screenshot.directory>
			</properties>
		</profile>
		<profile>
			<id>our-default-profile</id>
			<activation>
				<property>
					<name>!unsetDefaultProfile</name>
				</property>
			</activation>
		</profile>
	</profiles>

	<build>
		<sourceDirectory>src</sourceDirectory>
		<testSourceDirectory>test</testSourceDirectory>

		<!-- Define resources to be included in the jar. These will be copied to 
			the target dir in the resources phase of the build -->
		<resources>
			<resource>
				<directory>res</directory>
				<includes>
					<include>icons/*</include>
					<include>licenses/*</include>
					<include>logging.properties</include>
				</includes>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<!-- Tell eclipse how to handle the timestamp plugin -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.2,)</versionRange>
										<goals>
											<goal>create-timestamp</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>


		<plugins>

			<!-- Delete contents of directories that are populated from templates -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<filesets>
								<fileset>
									<directory>res/user-guide</directory>
									<includes>
										<include>**/*</include>
									</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create a file in the jar with the custom project properties. This 
				ensures they are accessible when needed -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<configuration>
							<outputFile>${project.build.outputDirectory}/project.properties</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create a year variable used in the copyright section -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create-timestamp</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<timestampFormat>yyyy</timestampFormat>
					<timestampPropertyName>build.year</timestampPropertyName>
				</configuration>
			</plugin>

			<!-- Create files from templates using the custom variables -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.1</version>
				<executions>

					<!-- Copy the readme with version info to the base directory so the 
						repo is up to date -->
					<execution>
						<id>create-readme-md</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}</directory>
									<includes>
										<include>README.md</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>

					<!-- Copy the wiki pages with version info to the wiki directory so 
						the wiki is up to date -->
					<execution>
						<id>create-wiki-md</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.wiki.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}/wiki</directory>
									<includes>
										<include>Installation.md</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>

					<!-- Copy script templates into scripts folder -->
					<execution>
						<id>create-jpackage-script</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.scripts.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}</directory>
									<includes>
										<include>packageAppImage.bat</include>
										<include>packageAppImage.sh</include>
										<include>packageDMG.sh</include>
										<include>uploadFilesToBitbucket.bat</include>
										<include>renderUserGuide.bat</include>
										<include>renderUserGuide.sh</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>

					<!-- Copy the user guide from templates to res, updating the version 
						information and download links -->
					<execution>
						<id>copy-user-guide</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}/res/user-guide</outputDirectory>
							<resources>
								<resource>
									<directory>${project.template.directory}/user-guide-template</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>

					<!-- Copy user guide screenshots from screens to res, ready to be included 
						in the user guide rendering -->
					<execution>
						<id>take-guide-screenshots</id>
						<phase>test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}/res/user-guide/img</outputDirectory>
							<resources>
								<resource>
									<directory>${project.screenshot.directory}/Mouse.nmd</directory>
									<includes>
										<include>Analysis info_Detection parameters.png</include>
										<include>Analysis info_Rulesets.png</include>
										<include>Editing.png</include>
										<include>Nuclear profiles_*.png</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.screenshot.directory}/Mouse_with_signals.nmd</directory>
									<includes>
										<include>Nuclear signals_*.png</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.screenshot.directory}/Multi</directory>
									<includes>
										<include>Images.png</include>
										<include>Clusters.png</include>
										<include>Comparisons_*.png</include>
										<include>Nuclear charts_*.png</include>
										<include>Nuclear segments_*.png</include>
									</includes>
								</resource>
							</resources>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>



				</executions>
			</plugin>

			<!-- Execute scripts created from templates -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>

					<!-- Run a script to download dependency jars that are not available 
						in Maven Central or other repos -->
					<execution>
						<?m2e ignore?> <!-- m2eclipse plugin does not know this plugin's abilities, don't run on 
							build in Eclipse: https://stackoverflow.com/questions/57767896/plugin-execution-not-covered-by-lifecycle-configuration-org-codehaus-mojo -->
						<id>install-dependencies</id>
						<phase>initialize</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${script.executor}</executable>
							<commandlineArgs>${script.args}
								${project.basedir}/${project.scripts.directory}/${script.dependencies}</commandlineArgs>
							<workingDirectory>${project.basedir}</workingDirectory>
						</configuration>
					</execution>

					<!-- Run a script to render the user guide and copy the rendered files 
						to the target directory so they will be included in the jar. This must occur 
						after the user guide has been rendered. Requires Rscript and pandoc on the 
						PATH -->
					<execution>
						<id>render-user-guide</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${script.executor}</executable>
							<commandlineArgs>${script.args}
								${project.basedir}/${project.scripts.directory}/${script.rendering}</commandlineArgs>
							<workingDirectory>${project.basedir}/res/user-guide</workingDirectory>
						</configuration>
					</execution>

					<!-- Run a script to package the jar into an appimage. Requires jpackage, 
						jlink and 7z on the PATH -->
					<execution>
						<id>make-appimage</id>
						<phase>verify</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${script.executor}</executable>
							<commandlineArgs>${script.args} ${script.packaging}</commandlineArgs>
							<workingDirectory>${project.basedir}/${project.scripts.directory}</workingDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compile to desired java version -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>16</source>
					<target>16</target>
				</configuration>
			</plugin>


			<!--Take screenshots and run tests. The screenshotter is a test class, 
				and will create the required sample datasets. Full tests can be run by including 
				the test/RunAllTests suite. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<includes>
						<include>com.bmskinner.nma.MakeScreenshots</include>
						<include>com.bmskinner.nma.RunAllTests</include>
					</includes>
				</configuration>
			</plugin>

			<!-- Configure the jar creation to include automatic module -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifestEntries>
							<Automatic-Module-Name>com.bmskinner.nma</Automatic-Module-Name>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- Create a jar with the dependencies included as a standalone version -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>create-executable-jar</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${jar.finalName}</finalName>
							<outputDirectory>${project.build.directory}/standalone</outputDirectory>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<appendAssemblyId>false</appendAssemblyId>
							<archive>
								<manifest>
									<mainClass>com.bmskinner.nma.core.NuclearMorphologyAnalysis</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<reporting>
		<plugins>
		</plugins>
	</reporting>

	<!-- Define custom repositories outside Maven central -->
	<repositories>
		<!-- Jitpack allows downloading of sources direct from e.g. Github -->
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>

		<!-- T-SNE is in this repo. via https://github.com/lejon/T-SNE-Java/issues/24 -->
		<repository>
			<id>scijava.public</id>
			<url>https://maven.scijava.org/content/groups/public</url>
		</repository>

	</repositories>

	<dependencies>

		<!--Not available in Maven Central -->
		<dependency>
			<groupId>com.github.lejon</groupId>
			<artifactId>T-SNE-Java</artifactId>
			<version>2.5.0</version>
			<exclusions>
				<exclusion>
					<groupId>com.github.lejon.T-SNE-Java</groupId>
					<artifactId>tsne-demos</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!--Not available in Maven Central, fetch from Github -->
		<dependency>
			<groupId>com.github.ijpb</groupId>
			<artifactId>MorphoLibJ</artifactId>
			<version>v1.5.1</version>
		</dependency>


		<!--Not available in Maven Central; no tagged versions on Github, using 
			latest commit available -->
		<dependency>
			<groupId>com.github.tag-bio</groupId>
			<artifactId>umap-java</artifactId>
			<version>9816ba0</version>
		</dependency>

		<!--Not available in Maven Central - download from https://sourceforge.net/projects/jebl/ 
			and add to maven with: mvn install:install-file -Dfile="/path/to/jebl-0.4.jar" 
			-DgroupId=jebl -DartifactId=jebl -Dversion=0.4 -Dpackaging=jar -DlocalRepositoryPath="path/to/local/maven/repo" -->
		<dependency>
			<groupId>jebl</groupId>
			<artifactId>jebl</artifactId>
			<version>0.4</version>
		</dependency>

		<dependency>
			<groupId>net.sourceforge.argparse4j</groupId>
			<artifactId>argparse4j</artifactId>
			<version>0.9.0</version>
		</dependency>

		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij</artifactId>
			<version>1.51s</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jdt</groupId>
			<artifactId>org.eclipse.jdt.annotation</artifactId>
			<version>2.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.swinglabs.swingx</groupId>
			<artifactId>swingx-all</artifactId>
			<version>1.6.5-1</version>
		</dependency>
		<dependency>
			<groupId>nz.ac.waikato.cms.weka</groupId>
			<artifactId>weka-stable</artifactId>
			<version>3.8.3</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.5.3</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>org.jfree.svg</artifactId>
			<version>5.0.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>3.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.28.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom2</artifactId>
			<version>2.0.6</version>
		</dependency>
		<dependency>
			<groupId>net.sf.doolin</groupId>
			<artifactId>javadocking</artifactId>
			<version>1.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>3.2.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.xmlgraphics/batik-transcoder 
			Exclusions required to avoid duplication of xml apis -->
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>batik-transcoder</artifactId>
			<version>1.14</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
				<exclusion>
					<groupId>java.xml</groupId>
					<artifactId>java.xml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Missing dependency from batik required for PNG transcoder -->
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>batik-codec</artifactId>
			<version>1.7</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
				<exclusion>
					<groupId>java.xml</groupId>
					<artifactId>java.xml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/ome/bio-formats -->
		<dependency>
			<groupId>ome</groupId>
			<artifactId>bio-formats</artifactId>
			<version>5.0.0-rc2</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
				<exclusion>
					<groupId>java.xml</groupId>
					<artifactId>java.xml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/ome/bio-formats_plugins -->
		<dependency>
			<groupId>ome</groupId>
			<artifactId>bio-formats_plugins</artifactId>
			<version>6.13.0</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
				<exclusion>
					<groupId>java.xml</groupId>
					<artifactId>java.xml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>


	</dependencies>
	<name>Nuclear Morphology Analysis</name>
	<url>https://bitbucket.org/bmskinner/nuclear_morphology/wiki/Home</url>
	<description>Nuclear Morphology Analysis is a program that allows for automated detection of round or asymmetric nuclei in images, and subsequent morphological analysis.</description>
	<inceptionYear>2015</inceptionYear>
	<licenses>
		<license>
			<name>GNU General Public License, Version 3</name>
			<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
			<distribution>manual</distribution>
			<comments>Free software license</comments>
		</license>
	</licenses>
</project>