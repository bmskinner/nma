/*******************************************************************************
 *  	Copyright (C) 2016 Ben Skinner
 *   
 *     This file is part of Nuclear Morphology Analysis.
 *
 *     Nuclear Morphology Analysis is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Nuclear Morphology Analysis is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Nuclear Morphology Analysis. If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package gui.tabs;

import gui.DatasetEvent;
import gui.DatasetEvent.DatasetMethod;
import gui.DatasetEventListener;
import gui.InterfaceEvent;
import gui.InterfaceEvent.InterfaceMethod;
import gui.InterfaceEventListener;
import gui.SignalChangeEvent;
import gui.SignalChangeListener;
import logging.Loggable;

import java.awt.Component;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

import org.jfree.chart.JFreeChart;

import charting.ChartCache;
import charting.TableCache;
import charting.options.ChartOptions;
import charting.options.TableOptions;
import components.CellCollection;
import components.generic.BorderTag;
import components.generic.ProfileType;
import analysis.AnalysisDataset;

/**
 * The DetailPanels hold chart and table caches, and track other DetailPanels
 * beneath them. Any dataset, interface or signal events generated by a 
 * sub-panel are passed upwards to the parent detail panel.
 * @author bms41
 *
 */
@SuppressWarnings("serial")
public abstract class DetailPanel extends JPanel implements TabPanel, SignalChangeListener, DatasetEventListener, InterfaceEventListener, Loggable {
	
	private final List<Object> listeners 			= new ArrayList<Object>();
	private final List<Object> datasetListeners 	= new ArrayList<Object>();
	private final List<Object> interfaceListeners 	= new ArrayList<Object>();
	
	private List<AnalysisDataset> list = new ArrayList<AnalysisDataset>();
	
	private final List<DetailPanel> subPanels = new  ArrayList<DetailPanel>();
	
	// The chart cache holds rendered charts for all selected options, until a change is made to a dataset
	// The table cache does the same for table models
	protected final ChartCache chartCache = new ChartCache();
	protected final TableCache tableCache = new TableCache();

	
	volatile private boolean isUpdating = false;
	
	protected static final Logger programLogger =  Logger.getLogger("ProgramLogger"); // log to the program LogPanel
	
	public DetailPanel( ){
	}
	
    /**
     * Log the given message to the program log window and to the dataset
     * debug file
     * @param level the log level
     * @param message the message to log
     */
    public void log(Level level, String message){
		programLogger.log(level, message);
    }
    
    /**
     * Log an error to the program log window and to the dataset
     * debug file. Logs with Level.SEVERE
     * @param message the error messsage
     * @param t the exception
     */
    public void logError(String message, Throwable t){
		programLogger.log(Level.SEVERE, message, t);
    }
	
	
	/**
	 * Add another detail panel as a sub panel to this.
	 * This will pass on refreshes and UI updates
	 * @param panel
	 */
	public void addSubPanel(final DetailPanel panel){
		subPanels.add(panel);
		panel.addSignalChangeListener(this);
		panel.addDatasetEventListener(this);
		panel.addInterfaceEventListener(this);
	}
	
	public List<DetailPanel> getSubPanels(){
		return subPanels;
	}
	
	public boolean hasSubPanels(){
		if(subPanels.size()>0){
			return true;
		}
		return false;
	}
	
	/**
	 * Fetch the currently active dataset for the panel.
	 * Use when only one dataset is expected to be visible;
	 * this simply accesses the first dataset in the list provided
	 * @return
	 */
	public AnalysisDataset activeDataset(){
		return list.get(0);
	}
	
	/**
	 * Make a new list holding only the active dataset. This is used
	 * to pass the active dataset back to update()
	 * @return
	 */
	public List<AnalysisDataset> activeDatasetToList(){
		List<AnalysisDataset> list = new ArrayList<AnalysisDataset>();
		list.add(activeDataset());
		return list;
	}
	
	/**
	 * Test if only a single dataset is selected
	 * @return
	 */
	public boolean isSingleDataset(){
		if(this.list.size()==1){
			return true;
		} else {
			return false;
		}
	}
	
	public boolean hasDatasets(){
		if(this.list.size()>0){
			return true;
		} else {
			return false;
		}
	}
	
	protected List<AnalysisDataset> getDatasets(){
		return this.list;
	}
	
	public ChartCache getChartCache(){
		return this.chartCache;
	}
	
	public boolean isUpdating(){
		
		if(this.isUpdating){
			return true;
		}
		
		for(DetailPanel panel : this.subPanels){
			if(panel.isUpdating()){
				return true;
			}
		}
		
		return false;
	}
	
	protected void setUpdating(boolean b){
		this.isUpdating = b;
	}
	
	
	/**
	 * Toggle wait cursor on element
	 * @param b
	 */
	public void setAnalysing(boolean b){
		if(b){
			
			for(Component c : this.getComponents()){
				c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); //new Cursor(Cursor.WAIT_CURSOR));
			}
			
			this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			
		} else {
			
			for(Component c : this.getComponents()){
				c.setCursor(Cursor.getDefaultCursor());
			}
			this.setCursor(Cursor.getDefaultCursor());
		}
		for(DetailPanel panel : this.subPanels){
			panel.setAnalysing(b);
		}
	}
	
	@Override
	public void setEnabled(boolean b){
		
		for(Component c : this.getComponents()){
			c.setEnabled(b);
		}
		
		for(DetailPanel panel : this.subPanels){
			panel.setEnabled(b);
		}
	}
	
	public void update(final List<AnalysisDataset> list){
		
		if(this.isUpdating()){
			programLogger.log(Level.FINEST, "Panel is already updating");
		} else {
			if(list!=null){
				this.list = list;
			} else {
				this.list = new ArrayList<AnalysisDataset>();
			}
			setUpdating(true);
			updateDetail();
		}

	}
	
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update 
	 */
	private void updateDetail(){
		
//		SwingUtilities.invokeLater(new Runnable(){
//			public void run(){
		programLogger.log(Level.FINEST, "Updating detail panel");
				try {
					if(hasDatasets()){
						
						if(isSingleDataset()){
							updateSingle();
						} else {
							updateMultiple();
						}
						
					} else {
						updateNull();
					}
					
				} catch (Exception e) {
					programLogger.log(Level.SEVERE, "Error updating panel", e);
					update( (List<AnalysisDataset>) null); // don't use updateNull because it throws an exception
				} finally {
					setUpdating(false);
				}
//			}
//		});
	}
	
	/**
	 * Given a list of datasets, count the segments in the median profile of each, 
	 * and test if all datasets have the same number of segments.
	 * @param list
	 * @return
	 * @throws Exception
	 */
	protected boolean checkSegmentCountsMatch(List<AnalysisDataset> list) throws Exception{
		int prevCount = 0;
		
		programLogger.log(Level.FINEST, "Counting segments in each dataset");
		// check that the datasets have the same number of segments
		for( AnalysisDataset dataset  : list){
			CellCollection collection = dataset.getCollection();
			int count = collection.getProfileCollection(ProfileType.REGULAR)
				.getSegmentedProfile(BorderTag.ORIENTATION_POINT)
				.getSegmentCount();
			
			programLogger.log(Level.FINEST, "\t"+dataset.getName()+": "+count+" segments");
			
			if(prevCount > 0 ){
				if(prevCount!=count){
					programLogger.log(Level.FINEST, "Segment count does not match");
					return false;
				}
			}
			prevCount = count;
		}
		return true;
	}
		
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a single dataset is selected
	 */
	protected abstract void updateSingle() throws Exception; 
	
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a multiple datasets are selected
	 */
	protected abstract void updateMultiple() throws Exception;
	
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a no datasets are selected
	 */
	protected abstract void updateNull() throws Exception;
		
	
	/**
	 * Fetch the desired chart, either from the cache, or by creating it
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected JFreeChart getChart(ChartOptions options) throws Exception{
		JFreeChart chart;
		if(getChartCache().hasChart(options)){
			programLogger.log(Level.FINEST, "Fetched cached chart");
			chart = getChartCache().getChart(options);

		} else { // No cache

			chart = createPanelChartType(options);
			getChartCache().addChart(options, chart);
			programLogger.log(Level.FINEST, "Added cached chart");
		}
		return chart;
	}
	
	/**
	 * Fetch the desired chart, either from the cache, or by creating it
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected TableModel getTable(TableOptions options) throws Exception{
		
		TableModel model;
		if(getTableCache().hasTable(options)){
			programLogger.log(Level.FINEST, "Fetched cached table");
			model = getTableCache().getTable(options);
		} else {
			model = createPanelTableType(options);
			programLogger.log(Level.FINEST, "Added cached table");
			getTableCache().addTable(options, model);
		}
		return model;
	}
	
	/**
	 * This should be overridden to create the appropriate tables for caching
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected abstract TableModel createPanelTableType(TableOptions options) throws Exception;
	
	/**
	 * This should be overridden to create the appropriate charts for caching
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected abstract JFreeChart createPanelChartType(ChartOptions options) throws Exception;
	
	
	/**
	 * Remove all charts from the cache. Does not invoke an update 
	 * @param list
	 */
	public void clearChartCache(){
		programLogger.log(Level.FINEST, "Clearing chart cache");
		this.getChartCache().clear();
		for(DetailPanel panel : this.subPanels){
			panel.clearChartCache();
		}
		programLogger.log(Level.FINEST, "Chart cache cleared");
	}
	
	/**
	 * Remove all charts from the cache. Does not invoke an update 
	 * @param list
	 */
	public void clearChartCache(final List<AnalysisDataset> list){
		programLogger.log(Level.FINEST, "Clearing chart cache for specific datasets");
		this.getChartCache().clear(list);
		programLogger.log(Level.FINEST, "Panel chart cache cleared");
		if(this.hasSubPanels()){
			programLogger.log(Level.FINEST, "Clearing sub-panel chart caches");
			for(DetailPanel panel : this.subPanels){
				panel.clearChartCache(list);
			}
		}
		programLogger.log(Level.FINEST, "Chart cache cleared");
	}
	
	/**
	 * Remove all charts from the cache. Then call an update of the panel
	 * @param list
	 */
	public void refreshChartCache(){
		clearChartCache();
		programLogger.log(Level.FINEST, "Updating charts after clear");
		this.update(getDatasets());
	}
	
	/**
	 * Remove all charts from the cache containing datasets in
	 * the given list, so they will be recalculated. This allows a refresh of
	 * some of the charts in the chache, without recalculating everything
	 * @param list
	 */
	public void refreshChartCache(final List<AnalysisDataset> list){
		programLogger.log(Level.FINEST, "Refreshing chart cache for specific datasets");
		clearChartCache(list);
		programLogger.log(Level.FINEST, "Updating panel for specific datasets");
		this.update(getDatasets());
	}
	
	public TableCache getTableCache(){
		return this.tableCache;
	}
	
	/**
	 * Remove all tables from the cache
	 * @param list
	 */
	public void clearTableCache(){
		programLogger.log(Level.FINEST, "Clearing table cache");
		this.getTableCache().clear();
		for(DetailPanel panel : this.subPanels){
			panel.clearTableCache();
		}
	}
	
	/**
	 * Remove all tables from the cache containing datasets in
	 * the given list, so they will be recalculated
	 * @param list
	 */
	public void clearTableCache(final List<AnalysisDataset> list){
		programLogger.log(Level.FINEST, "Clearing table cache for specific datasets");
		this.getTableCache().clear(list);
		if(this.hasSubPanels()){
			for(DetailPanel panel : this.subPanels){
				panel.refreshTableCache(list);
			}
		}
		programLogger.log(Level.FINEST, "Chart cache cleared");
	}
	
	/**
	 * Remove all charts from the cache and trigger an update
	 * @param list
	 */
	public void refreshTableCache(){
		clearTableCache();
		programLogger.log(Level.FINEST, "Updating charts after clear");
		this.update(getDatasets());
	}
	
	/**
	 * Remove all tables from the cache containing datasets in
	 * the given list, so they will be recalculated
	 * @param list
	 */
	public void refreshTableCache(final List<AnalysisDataset> list){
		clearTableCache(list);
		this.update(getDatasets());
	}
	
	/**
	 * Set the given table to use a custom table renderer. The renderer will be
	 * used for every column except the first.
	 * @param table
	 */
	protected void setRenderer(JTable table, TableCellRenderer renderer){
		int columns = table.getColumnModel().getColumnCount();
		if(columns>1){
			for(int i=1;i<columns;i++){
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
		}
	}
	
	public synchronized void addSignalChangeListener( SignalChangeListener l ) {
        listeners.add( l );
    }
    
    public synchronized void removeSignalChangeListener( SignalChangeListener l ) {
        listeners.remove( l );
    }
    
    public synchronized void addDatasetEventListener( DatasetEventListener l ) {
    	datasetListeners.add( l );
    }
    
    public synchronized void removeDatasetEventListener( DatasetEventListener l ) {
    	datasetListeners.remove( l );
    }
    
    public synchronized void addInterfaceEventListener( InterfaceEventListener l ) {
    	interfaceListeners.add( l );
    }
    
    public synchronized void removeInterfaceEventListener( InterfaceEventListener l ) {
    	interfaceListeners.remove( l );
    }
        
    
    /**
     * A message to write in the main window status line
     * @param message
     */
    public void status(String message){
    	fireSignalChangeEvent("Status_"+message);
    }
    	
    protected synchronized void fireSignalChangeEvent(String message) {
    	
        SignalChangeEvent event = new SignalChangeEvent( this, message, this.getClass().getSimpleName());
        Iterator<Object> iterator = listeners.iterator();
        while( iterator.hasNext() ) {
            ( (SignalChangeListener) iterator.next() ).signalChangeReceived( event );
        }
    }
    
    protected synchronized void fireSignalChangeEvent(SignalChangeEvent event) {
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (SignalChangeListener) iterator.next() ).signalChangeReceived( event );
    	}
    }
    
    protected synchronized void fireDatasetEvent(DatasetMethod method, List<AnalysisDataset> list) {
    	
        DatasetEvent event = new DatasetEvent( this, method, this.getClass().getSimpleName(), list);
        Iterator<Object> iterator = datasetListeners.iterator();
        while( iterator.hasNext() ) {
            ( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
        }
    }
    
    protected synchronized void fireDatasetEvent(DatasetMethod method, List<AnalysisDataset> list, AnalysisDataset template) {

    	DatasetEvent event = new DatasetEvent( this, method, this.getClass().getSimpleName(), list, template);
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
    	}
    }
    
    protected synchronized void fireDatasetEvent(DatasetEvent event) {
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
    	}
    }
    
    protected synchronized void fireInterfaceEvent(InterfaceMethod method) {
    	
    	InterfaceEvent event = new InterfaceEvent( this, method, this.getClass().getSimpleName());
        Iterator<Object> iterator = interfaceListeners.iterator();
        while( iterator.hasNext() ) {
            ( (InterfaceEventListener) iterator.next() ).interfaceEventReceived( event );
        }
    }
    
    protected synchronized void fireInterfaceEvent(InterfaceEvent event) {

        Iterator<Object> iterator = interfaceListeners.iterator();
        while( iterator.hasNext() ) {
            ( (InterfaceEventListener) iterator.next() ).interfaceEventReceived( event );
        }
    }

    public void interfaceEventReceived(InterfaceEvent event){
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				programLogger.log(Level.FINEST, "Passing interface event upwards");
				fireInterfaceEvent(new InterfaceEvent(this, event));
			}
		}
    }

    public void datasetEventReceived(DatasetEvent event){
    	
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				programLogger.log(Level.FINEST, "Passing dataset event upwards");
				fireDatasetEvent(new DatasetEvent(this, event));
			}
		}
    }

    public void signalChangeReceived(SignalChangeEvent event){
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				programLogger.log(Level.FINEST, "Passing signal change event upwards");
				fireSignalChangeEvent(new SignalChangeEvent(this, event));
			}
		}
    }

}
