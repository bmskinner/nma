/*******************************************************************************
 *  	Copyright (C) 2016 Ben Skinner
 *   
 *     This file is part of Nuclear Morphology Analysis.
 *
 *     Nuclear Morphology Analysis is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Nuclear Morphology Analysis is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Nuclear Morphology Analysis. If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package gui.tabs;

import gui.ChartOptionsRenderedEvent;
import gui.ChartOptionsRenderedEventListener;
import gui.DatasetEvent;
import gui.DatasetEvent.DatasetMethod;
import gui.DatasetEventListener;
import gui.InterfaceEvent;
import gui.InterfaceEvent.InterfaceMethod;
import gui.InterfaceEventListener;
import gui.SignalChangeEvent;
import gui.SignalChangeListener;
import gui.ThreadManager;
import logging.Loggable;

import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

import org.jfree.chart.JFreeChart;

import charting.ChartCache;
import charting.TableCache;
import charting.charts.ExportableChartPanel;
import charting.charts.ScatterChartFactory;
import charting.datasets.NucleusTableDatasetCreator;
import charting.options.ChartOptions;
import charting.options.TableOptions;
import analysis.AnalysisDataset;

/**
 * The DetailPanels hold chart and table caches, and track other DetailPanels
 * beneath them. Any dataset, interface or signal events generated by a 
 * sub-panel are passed upwards to the parent detail panel.
 * @author bms41
 *
 */
@SuppressWarnings("serial")
public abstract class DetailPanel 
	extends JPanel 
	implements TabPanel, SignalChangeListener, DatasetEventListener, InterfaceEventListener, Loggable, ChartOptionsRenderedEventListener {
	
	private final List<Object> listeners 			= new ArrayList<Object>();
	private final List<Object> datasetListeners 	= new ArrayList<Object>();
	private final List<Object> interfaceListeners 	= new ArrayList<Object>();
	
	private List<AnalysisDataset> list = new ArrayList<AnalysisDataset>();
	
	private final List<DetailPanel> subPanels = new  ArrayList<DetailPanel>();
	
	// The chart cache holds rendered charts for all selected options, until a change is made to a dataset
	// The table cache does the same for table models
	protected final ChartCache chartCache = new ChartCache();
	protected final TableCache tableCache = new TableCache();

	
	volatile private boolean isUpdating = false;
	
	public DetailPanel( ){
		this.addChartOptionsRenderedEventListener(this);
	}

	
	/**
	 * Add another detail panel as a sub panel to this.
	 * This will pass on refreshes and UI updates
	 * @param panel
	 */
	public void addSubPanel(final DetailPanel panel){
		subPanels.add(panel);
		panel.addSignalChangeListener(this);
		panel.addDatasetEventListener(this);
		panel.addInterfaceEventListener(this);
	}
	
	public List<DetailPanel> getSubPanels(){
		return subPanels;
	}
	
	public boolean hasSubPanels(){
		return subPanels.size()>0;
	}
	
	/**
	 * Fetch the currently active dataset for the panel.
	 * Use when only one dataset is expected to be visible;
	 * this simply accesses the first dataset in the list provided
	 * @return
	 */
	public AnalysisDataset activeDataset(){
		return list.get(0);
	}
	
	/**
	 * Make a new list holding only the active dataset. This is used
	 * to pass the active dataset back to update()
	 * @return
	 */
	public List<AnalysisDataset> activeDatasetToList(){
		List<AnalysisDataset> list = new ArrayList<AnalysisDataset>();
		list.add(activeDataset());
		return list;
	}
	
	/**
	 * Test if only a single dataset is selected
	 * @return
	 */
	public boolean isSingleDataset(){
		return(this.list.size()==1);
	}
	
	/**
	 * Test if multiple datasets are selected
	 * @return
	 */
	public boolean isMultipleDatasets(){
		return(this.list.size()>1);
	}
	
	public boolean hasDatasets(){
		return(this.list.size()>0);
	}
	
	protected List<AnalysisDataset> getDatasets(){
		return this.list;
	}
	
	public ChartCache getChartCache(){
		return this.chartCache;
	}
	
	public boolean isUpdating(){
		
		if(this.isUpdating){
			return true;
		}
		
		for(DetailPanel panel : this.subPanels){
			if(panel.isUpdating()){
				return true;
			}
		}
		
		return false;
	}
	
	protected void setUpdating(boolean b){
		this.isUpdating = b;
	}
	
	
	/**
	 * Toggle wait cursor on element
	 * @param b
	 */
	public void setAnalysing(boolean b){
		if(b){
			
			for(Component c : this.getComponents()){
				c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); //new Cursor(Cursor.WAIT_CURSOR));
			}
			
			this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			
		} else {
			
			for(Component c : this.getComponents()){
				c.setCursor(Cursor.getDefaultCursor());
			}
			this.setCursor(Cursor.getDefaultCursor());
		}
		for(DetailPanel panel : this.subPanels){
			panel.setAnalysing(b);
		}
	}
	
	@Override
	public void setEnabled(boolean b){
		
		for(Component c : this.getComponents()){
			c.setEnabled(b);
		}
		
		for(DetailPanel panel : this.subPanels){
			panel.setEnabled(b);
		}
	}
	
	/**
	 * Force any chart panels currently visible on screen
	 * to redraw, allowing text to be rendered with the 
	 * appropriate aspect ratio
	 */
	public void updateSize(){
		
		updateSize(this);
				
		for(DetailPanel panel : this.subPanels){
			panel.updateSize();
		}
	}
	
	/**
	 * Carries out the resize - recursively search all
	 * containers for chart panels, and refresh the chart
	 * cache if any are found.
	 * @param container
	 */
	private void updateSize(Container container){
		for(Component c : container.getComponents()){
			if(c instanceof ExportableChartPanel){
				
				if(c.isShowing()){
					this.refreshChartCache();
					return;
				}
				
				
			}
			
			if(c instanceof Container){
				updateSize((Container) c);
			}
				
		}
	}
	
	public void update(final List<AnalysisDataset> list){
		
		if(this.isUpdating()){
			finest(this.getClass().getName()+": Panel is already updating");
		} else {
			finest(this.getClass().getName()+": Preparing to update");
			if(list!=null){
				this.list = list;
			} else {
				this.list = new ArrayList<AnalysisDataset>();
			}
			finest(this.getClass().getName()+": Set dataset list of "+this.list.size()+" datasets");
			setUpdating(true);
			finest(this.getClass().getName()+": Set updating state");
			updateDetail();
		}

	}
	
	/**
	 * This method sets which of the overriden handling methods
	 * are run by extending classes.
	 */
	private void updateDetail(){
		
		finest(this.getClass().getName()+": Updating detail panel");
		try {
			finest(this.getClass().getName()+": Checking dataset list");
			if(hasDatasets()){
				finest(this.getClass().getName()+": Datasets present");
				if(isSingleDataset()){
					finer( this.getClass().getName()+": Single dataset present");
					updateSingle();
				} else {
					finer(this.getClass().getName()+": Multiple datasets present");
					updateMultiple();
				}
				
			} else {
				finer(this.getClass().getName()+": No datasets present");
				updateNull();
			}
			
		} catch (Exception e) {
			warn(this.getClass().getName()+": Error updating panel");
			log(Level.FINE, "Error updating panel: "+ this.getClass().getName(), e); // save detail for fine logging
			setUpdating(false);
			try {
				updateNull();
			} catch(Exception e1){
				warn(this.getClass().getName()+": Error recovering from error updating panel");
				log(Level.FINE, "Error recovering from error updating panel: "+ this.getClass().getName(), e1);
				setUpdating(false);
			}
		} finally {
			setUpdating(false);
			finest(this.getClass().getName()+": Finished update");
		}
	}
			
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a single dataset is selected
	 */
	protected void updateSingle(){
		finest(this.getClass().getName()+": Updating single dataset");
	}
	
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a multiple datasets are selected
	 */
	protected void updateMultiple(){
		finest(this.getClass().getName()+": Updating multiple datasets");
	}
	
	/**
	 * This method must be overridden by the extending class
	 * to perform the actual update when a no datasets are selected
	 */
	protected void updateNull(){
		finest(this.getClass().getName()+": Updating null dataset");
	}
	
	/**
	 * Fetch the chart with the given options from the cache, and display
	 * it in the target ChartPanel. If the chart is not in the cache, a 
	 * SwingWorker will be created to render the chart and display it once
	 * complete. Note that this requires the options to have been created
	 * with a setTarget() value.
	 * @param options
	 */
	protected synchronized void setChart(ChartOptions options) {
		if(chartCache.hasChart(options)){
			finest("Fetched cached chart with hashcode "+options.hashCode());
			JFreeChart chart = getChartCache().getChart(options);
			
			if(options.getTarget()!=null){
				options.getTarget().setChart(chart);
			}

		} else { // No cached chart
			finest("No cached chart available with hashcode "+options.hashCode());
			// Make a background worker to generate the chart and
			// update the target chart panel when done
			ChartFactoryWorker worker = new ChartFactoryWorker(options);
			ThreadManager.getInstance().submit(worker);//worker.execute();
		}
	}
		
	
	/**
	 * Fetch the desired chart, either from the cache, or by creating it
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected synchronized JFreeChart getChart(ChartOptions options) {
		JFreeChart chart;
		if(chartCache.hasChart(options)){
			finest("Fetched cached chart with hashcode "+options.hashCode());
			chart = getChartCache().getChart(options);

		} else { // No cached chart
			finest("No cached chart available with hashcode "+options.hashCode());

			try {
				chart = createPanelChartType(options);
			} catch (Exception e) {
				warn("Error creating chart: "+ this.getClass().getSimpleName());
				log(Level.FINE, this.getClass().getName()+": Error creating chart", e);
				
				// Draw an empty chart to fill the space
				chart = ScatterChartFactory.getInstance().makeEmptyChart();
			}
			getChartCache().addChart(options, chart);
			finest("Added cached chart");
		}
		return chart;
	}
	
	/**
	 * Fetch the desired chart, either from the cache, or by creating it
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected synchronized TableModel getTable(TableOptions options) {
		
		TableModel model;
		if(getTableCache().hasTable(options)){
			finest("Fetched cached table");
			model = getTableCache().getTable(options);
		} else {
			try {
				model = createPanelTableType(options);
			} catch (Exception e) {
				warn("Error creating table: "+ this.getClass().getSimpleName());
				log(Level.FINE, this.getClass().getName()+": Error creating table", e);
				model = NucleusTableDatasetCreator.getInstance().createBlankTable();
			}
			finest("Added cached table");
			getTableCache().addTable(options, model);
		}
		return model;
	}
	
	/**
	 * This should be overridden to create the appropriate tables for caching
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected TableModel createPanelTableType(TableOptions options) throws Exception{
		return null;
	}
	
	/**
	 * This should be overridden to create the appropriate charts for caching
	 * @param options
	 * @return
	 * @throws Exception
	 */
	protected JFreeChart createPanelChartType(ChartOptions options) throws Exception{
		return null;
	}
	
	
	/**
	 * Remove all charts from the cache. Does not invoke an update 
	 * @param list
	 */
	public synchronized void clearChartCache(){
		finest("Clearing chart cache");
		this.getChartCache().clear();
		for(DetailPanel panel : this.subPanels){
			panel.clearChartCache();
		}
		finest("Chart cache cleared");
	}
	
	/**
	 * Remove all charts from the cache. Does not invoke an update 
	 * @param list
	 */
	public synchronized void clearChartCache(final List<AnalysisDataset> list){
		finest("Clearing chart cache for specific datasets");
		this.getChartCache().clear(list);
		finest("Panel chart cache cleared");
		if(this.hasSubPanels()){
			finest("Clearing sub-panel chart caches");
			for(DetailPanel panel : this.subPanels){
				panel.clearChartCache(list);
			}
		}
		finest("Chart cache cleared");
	}
	
	/**
	 * Remove all charts from the cache. Then call an update of the panel
	 * @param list
	 */
	public synchronized void refreshChartCache(){
		clearChartCache();
		finest("Updating charts after clear");
		this.update(getDatasets());
	}
	
	/**
	 * Remove all charts from the cache containing datasets in
	 * the given list, so they will be recalculated. This allows a refresh of
	 * some of the charts in the chache, without recalculating everything
	 * @param list
	 */
	public synchronized void refreshChartCache(final List<AnalysisDataset> list){
		finest("Refreshing chart cache for specific datasets");
		clearChartCache(list);
		finest("Updating panel for specific datasets");
		this.update(getDatasets());
	}
	
	public synchronized TableCache getTableCache(){
		return this.tableCache;
	}
	
	/**
	 * Remove all tables from the cache
	 * @param list
	 */
	public synchronized void clearTableCache(){
		finest("Clearing table cache");
		this.getTableCache().clear();
		for(DetailPanel panel : this.subPanels){
			panel.clearTableCache();
		}
		finest("Table cache cleared");
	}
	
	/**
	 * Remove all tables from the cache containing datasets in
	 * the given list, so they will be recalculated
	 * @param list
	 */
	public synchronized void clearTableCache(final List<AnalysisDataset> list){
		finest("Clearing table cache for specific datasets");
		this.getTableCache().clear(list);
		if(this.hasSubPanels()){
			for(DetailPanel panel : this.subPanels){
				panel.clearTableCache(list);
			}
		}
		finest("Table cache cleared for specific datasets");
	}
	
	/**
	 * Remove all charts from the cache and trigger an update
	 * @param list
	 */
	public synchronized void refreshTableCache(){
		clearTableCache();
		finest("Updating tables after clear");
		this.update(getDatasets());
	}
	
	/**
	 * Remove all tables from the cache containing datasets in
	 * the given list, so they will be recalculated
	 * @param list
	 */
	public synchronized void refreshTableCache(final List<AnalysisDataset> list){
		clearTableCache(list);
		this.update(getDatasets());
	}
	
	/**
	 * Set the given table to use a custom table renderer. The renderer will be
	 * used for every column except the first.
	 * @param table
	 */
	protected void setRenderer(JTable table, TableCellRenderer renderer){
		int columns = table.getColumnModel().getColumnCount();
		if(columns>1){
			for(int i=1;i<columns;i++){
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
		}
	}
	
	public synchronized void addSignalChangeListener( SignalChangeListener l ) {
        listeners.add( l );
    }
    
    public synchronized void removeSignalChangeListener( SignalChangeListener l ) {
        listeners.remove( l );
    }
    
    public synchronized void addDatasetEventListener( DatasetEventListener l ) {
    	datasetListeners.add( l );
    }
    
    public synchronized void removeDatasetEventListener( DatasetEventListener l ) {
    	datasetListeners.remove( l );
    }
    
    public synchronized void addInterfaceEventListener( InterfaceEventListener l ) {
    	interfaceListeners.add( l );
    }
    
    public synchronized void removeInterfaceEventListener( InterfaceEventListener l ) {
    	interfaceListeners.remove( l );
    }
    
    @Override
	public void chartOptionsRenderedEventReceived(ChartOptionsRenderedEvent e){
    	// To be overridden as needed by extending classes
    	update(getDatasets());
    }
        
    
    /**
     * A message to write in the main window status line
     * @param message
     */
    public void status(String message){
    	fireSignalChangeEvent("Status_"+message);
    }
    	
    protected synchronized void fireSignalChangeEvent(String message) {
    	
        SignalChangeEvent event = new SignalChangeEvent( this, message, this.getClass().getSimpleName());
        Iterator<Object> iterator = listeners.iterator();
        while( iterator.hasNext() ) {
            ( (SignalChangeListener) iterator.next() ).signalChangeReceived( event );
        }
    }
    
    protected synchronized void fireSignalChangeEvent(SignalChangeEvent event) {
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (SignalChangeListener) iterator.next() ).signalChangeReceived( event );
    	}
    }
    
    protected synchronized void fireDatasetEvent(DatasetMethod method, List<AnalysisDataset> list) {
    	
        DatasetEvent event = new DatasetEvent( this, method, this.getClass().getSimpleName(), list);
        Iterator<Object> iterator = datasetListeners.iterator();
        while( iterator.hasNext() ) {
            ( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
        }
    }
    
    protected synchronized void fireDatasetEvent(DatasetMethod method, List<AnalysisDataset> list, AnalysisDataset template) {

    	DatasetEvent event = new DatasetEvent( this, method, this.getClass().getSimpleName(), list, template);
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
    	}
    }
    
    protected synchronized void fireDatasetEvent(DatasetEvent event) {
    	Iterator<Object> iterator = datasetListeners.iterator();
    	while( iterator.hasNext() ) {
    		( (DatasetEventListener) iterator.next() ).datasetEventReceived( event );
    	}
    }
    
    protected synchronized void fireInterfaceEvent(InterfaceMethod method) {
    	
    	InterfaceEvent event = new InterfaceEvent( this, method, this.getClass().getSimpleName());
        Iterator<Object> iterator = interfaceListeners.iterator();
        while( iterator.hasNext() ) {
            ( (InterfaceEventListener) iterator.next() ).interfaceEventReceived( event );
        }
    }
    
    protected synchronized void fireInterfaceEvent(InterfaceEvent event) {

        Iterator<Object> iterator = interfaceListeners.iterator();
        while( iterator.hasNext() ) {
            ( (InterfaceEventListener) iterator.next() ).interfaceEventReceived( event );
        }
    }

    public void interfaceEventReceived(InterfaceEvent event){
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				finest("Passing interface event upwards");
				fireInterfaceEvent(new InterfaceEvent(this, event));
			}
		}
    }

    public void datasetEventReceived(DatasetEvent event){
    	
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				finest("Passing dataset event upwards");
				fireDatasetEvent(new DatasetEvent(this, event));
			}
		}
    }

    public void signalChangeReceived(SignalChangeEvent event){
    	// Pass messages upwards
    	for(DetailPanel panel : this.subPanels){
			if(event.getSource().equals(panel)){
				finest("Passing signal change event upwards");
				fireSignalChangeEvent(new SignalChangeEvent(this, event));
			}
		}
    }
    
    /**
     * Charting can be an intensive process, especially with background
     * images being imported for outline charts. This worker will keep the 
     * chart generation off the EDT
     * @author bms41
     *
     */
    protected class ChartFactoryWorker extends SwingWorker<JFreeChart, Void> {
    	
    	private ChartOptions options;
    	
    	public ChartFactoryWorker(ChartOptions options){
    		this.options = options;
    	}

    	@Override
    	protected JFreeChart doInBackground() throws Exception {

    		try {

    			finest("Creating chart type");
    			JFreeChart chart = createPanelChartType(options);
    			finest("Adding chart type to cache");
    			chartCache.addChart(options, chart);

    			
    			return chart;
    		} catch(Exception e){
    			error("Error creating chart", e);
    			return null;
    		}

    	}
    	
    	
    	
    	@Override
        public void done() {
   	
    		try {
    			if(options.getTarget()!=null){
    			
    				options.getTarget().setChart(get());
    				finest("Set chart panel to new chart");
    			}
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
//    		fireChartOptionsRenderedEvent(options);
        } 
    	

    }
    
    /**
     * Signal listeners that the chart with the given options
     * has been rendered
     * @param options
     */
    public void fireChartOptionsRenderedEvent(ChartOptions options){
    	ChartOptionsRenderedEvent e = new ChartOptionsRenderedEvent(this, options);
    	Iterator<Object> iterator = listeners.iterator();
        while( iterator.hasNext() ) {
            ( (ChartOptionsRenderedEventListener) iterator.next() ).chartOptionsRenderedEventReceived( e );
        }
    }
    
    
    /**
     * Add a listener for completed charts rendered into the chart cache of this panel.
     * @param l
     */
    public synchronized void addChartOptionsRenderedEventListener( ChartOptionsRenderedEventListener l ) {
    	listeners.add( l );
    }
    
    public synchronized void removeChartOptionsRenderedEventListener( ChartOptionsRenderedEventListener l ) {
    	listeners.remove( l );
    }
        
}
